name: Build and Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-14
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmupdf-dev pkg-config
        if [ "${{ matrix.goarch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install mupdf pkg-config

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install msys2 --params "/NoUpdate" && C:\msys64\usr\bin\bash -lc "pacman -Syu --noconfirm && pacman -S --noconfirm mingw-w64-x86_64-mupdf mingw-w64-x86_64-pkg-config mingw-w64-x86_64-coreutils"

    - name: Set environment for Windows
      if: runner.os == 'Windows'
      run: echo "PKG_CONFIG_PATH=C:/msys64/mingw64/lib/pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    
    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
        CC: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || '' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig"
        fi
        go build -v -tags "extlib static pkgconfig" -o pdf2img-${{ matrix.goos }}-${{ matrix.goarch }}$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; fi) main.go

    - name: Verify Static Linking
      shell: bash
      run: |
        set -e
        BINARY_NAME="pdf2img-${{ matrix.goos }}-${{ matrix.goarch }}$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; fi)"
        echo "Verifying linking for $BINARY_NAME"
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "--- ldd output ---"
          # On a fully static binary, ldd returns a non-zero exit code and prints to stderr.
          # We pipe stderr to stdout and check the output.
          LDD_OUTPUT=$(ldd $BINARY_NAME 2>&1 || true)
          echo "$LDD_OUTPUT"
          echo "---"
          if echo "$LDD_OUTPUT" | grep -q 'mupdf'; then
            echo "Error: Binary is dynamically linked to mupdf on Linux"
            exit 1
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "--- otool -L output ---"
          otool -L $BINARY_NAME
          echo "---"
          if otool -L $BINARY_NAME | grep -q 'mupdf'; then
            echo "Error: Binary is dynamically linked to mupdf on macOS"
            exit 1
          fi
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "--- objdump -p output ---"
          C:/msys64/mingw64/bin/objdump -p $BINARY_NAME | grep 'DLL Name'
          echo "---"
          if C:/msys64/mingw64/bin/objdump -p $BINARY_NAME | grep -q 'mupdf'; then
            echo "Error: Binary is dynamically linked to mupdf on Windows"
            exit 1
          fi
        fi
        echo "OK: Binary is not dynamically linked to mupdf."

    - name: Generate SHA256 checksum
      shell: bash
      run: |
        set -e
        BINARY_NAME="pdf2img-${{ matrix.goos }}-${{ matrix.goarch }}$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; fi)"
        if [[ "${{ runner.os }}" == "Linux" ]] || [[ "${{ runner.os }}" == "Windows" ]]; then
          sha256sum $BINARY_NAME > $BINARY_NAME.sha256
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          shasum -a 256 $BINARY_NAME > $BINARY_NAME.sha256
        fi
        cat $BINARY_NAME.sha256

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: pdf2img-builds
        path: |
          pdf2img-* 