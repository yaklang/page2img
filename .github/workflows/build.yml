name: Build and Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-14
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install C-Compiler (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        if [ "${{ matrix.goarch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        else
          sudo apt-get install -y gcc
        fi

    - name: Install C-Compiler and Tools (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
        CC: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || '' }}
      shell: bash
      run: |
        go build -v -tags "static" -o page2img-${{ matrix.goos }}-${{ matrix.goarch }}$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; fi) page2img.go

    - name: Verify Static Linking
      shell: bash
      run: |
        set -e
        BINARY_NAME="page2img-${{ matrix.goos }}-${{ matrix.goarch }}$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; fi)"
        echo "Verifying linking for $BINARY_NAME"
        
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "--- ldd stdout & stderr ---"
          LDD_OUTPUT=$(ldd $BINARY_NAME 2>&1 || true)
          echo "$LDD_OUTPUT"
          echo "-------------------------"
          if echo "$LDD_OUTPUT" | grep -q 'mupdf'; then echo "Error: Found dynamic link to mupdf" && exit 1; fi
        
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "--- otool stdout & stderr ---"
          OTOOL_OUTPUT=$(otool -L $BINARY_NAME 2>&1 || true)
          echo "$OTOOL_OUTPUT"
          echo "---------------------------"
          if echo "$OTOOL_OUTPUT" | grep -q 'mupdf'; then echo "Error: Found dynamic link to mupdf" && exit 1; fi

        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "--- objdump stdout & stderr ---"
          OBJDUMP_OUTPUT=$(objdump -p $BINARY_NAME 2>&1 || true)
          echo "$OBJDUMP_OUTPUT"
          echo "-----------------------------"
          if echo "$OBJDUMP_OUTPUT" | grep -q 'mupdf'; then echo "Error: Found dynamic link to mupdf" && exit 1; fi
        fi
        
        echo "OK: Binary is not dynamically linked to mupdf."

    - name: Smoke Test
      # Only run the smoke test if the binary's architecture matches the runner's architecture.
      # We cannot execute a cross-compiled binary.
      if: (runner.arch == 'X64' && matrix.goarch == 'amd64') || (runner.arch == 'ARM64' && matrix.goarch == 'arm64')
      shell: bash
      run: |
        set -e
        BINARY_NAME="./page2img-${{ matrix.goos }}-${{ matrix.goarch }}$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; fi)"
        echo "Running smoke test: $BINARY_NAME -h"
        # The -h flag causes the program to exit with code 2, which is expected.
        # We check for this specific exit code to confirm it ran correctly.
        $BINARY_NAME -h || [ $? -eq 2 ]

    - name: Generate SHA256 checksum
      shell: bash
      run: |
        set -e
        BINARY_NAME="page2img-${{ matrix.goos }}-${{ matrix.goarch }}$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; fi)"
        
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          pwsh -Command "\$hash = (Get-FileHash -Algorithm SHA256 '${BINARY_NAME}').Hash.ToLower(); \"\$hash  ${BINARY_NAME}\" | Out-File -FilePath ${BINARY_NAME}.sha256"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
        else
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
        fi

        echo "--- Checksum file: ${BINARY_NAME}.sha256 ---"
        cat "${BINARY_NAME}.sha256"

    - name: Upload temporary artifact
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          page2img-*
        retention-days: 1

  package:
    name: Package Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: ls -R artifacts

      - name: Download Yak for uploading
        run: |
          wget -q -O './yak' https://yaklang.oss-accelerate.aliyuncs.com/yak/ci/yak_linux_amd64
          chmod +x ./yak

      - name: Upload to OSS
        env:
          OSS_KEY_ID: ${{ secrets.OSS_KEY_ID }}
          OSS_KEY_SECRET: ${{ secrets.OSS_KEY_SECRET }}
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo "Preparing to upload artifacts to /page2img/$DATE/"

          find ./artifacts -type f -name "page2img-*" | while read -r file_path; do
            if [ -f "$file_path" ]; then
              filename=$(basename "$file_path")
              remote_path="/page2img/$DATE/$filename"
              echo "Uploading $file_path to oss://yaklang$remote_path"
              ./yak upload-oss \
                -b yaklang \
                --endpoint oss-accelerate.aliyuncs.com \
                -ak "$OSS_KEY_ID" \
                -sk "$OSS_KEY_SECRET" \
                -t 5 \
                -f "$file_path:$remote_path"
            else
              echo "File not found: $file_path, skipping."
            fi
          done

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: page2img-builds
          path: artifacts/ 